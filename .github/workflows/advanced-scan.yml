name: ROCON Scanner - Advanced Modes

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Advanced Scan Type'
        required: true
        default: 'test_run'
        type: choice
        options:
          - test_run
          - port_scan
          - minecraft_scan
      target_ip:
        description: 'Target IP or IP range (for port/minecraft scanning)'
        required: false
        default: '127.0.0.1'
      port_start:
        description: 'Start port (for port/minecraft scanning)'
        required: false
        default: '80'
      port_end:
        description: 'End port (for port/minecraft scanning)'
        required: false
        default: '443'
      protocols:
        description: 'Protocols (tcp,udp,both - for port scanning)'
        required: false
        default: 'tcp'
      timeout:
        description: 'Timeout in seconds (for port scanning)'
        required: false
        default: '1.0'
      minecraft_port_start:
        description: 'Minecraft scan start port'
        required: false
        default: '25565'
      minecraft_port_end:
        description: 'Minecraft scan end port'
        required: false
        default: '25570'

jobs:
  advanced_scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Make script executable
      run: chmod +x main.py
      
    - name: Run Test Mode (Safe)
      if: github.event.inputs.scan_type == 'test_run'
      run: |
        echo "Running ROCON Scanner in test mode..."
        echo "This demonstrates the tool capabilities without network scanning."
        echo ""
        echo "=== ROCON Scanner Tool Help ==="
        python main.py --help
        echo ""
        echo "=== Running Unit Tests ==="
        python test_scanner.py
        echo ""
        echo "=== Tool Information ==="
        echo "ROCON Scanner is a network reconnaissance tool that supports:"
        echo "- IP range and subnet scanning (ping/socket methods)"
        echo "- TCP/UDP port scanning"
        echo "- Minecraft server detection"
        echo "- Multiple output formats (JSON, TXT, CSV)"
        echo "- Concurrent scanning with configurable workers"
        echo ""
        echo "To use this tool for actual network scanning:"
        echo "1. Select 'port_scan' or 'minecraft_scan' mode"
        echo "2. Provide appropriate target IPs"
        echo "3. Configure scan parameters"
        echo ""
        echo "Note: Network scanning should only be performed on networks you own or have permission to scan."
        
    - name: Run Port Scan
      if: github.event.inputs.scan_type == 'port_scan'
      run: |
        echo "Running port scan on ${{ github.event.inputs.target_ip }}"
        echo "Ports: ${{ github.event.inputs.port_start }}-${{ github.event.inputs.port_end }}"
        echo "Protocols: ${{ github.event.inputs.protocols }}"
        echo "Timeout: ${{ github.event.inputs.timeout }}s"
        echo ""
        echo "Note: This will attempt to scan the specified target."
        echo "Ensure you have permission to scan the target network."
        echo ""
        # This would run the actual port scan - commented out for safety
        # python main.py --range "${{ github.event.inputs.target_ip }}" "${{ github.event.inputs.target_ip }}" \
        #   --method socket --workers 10 --verbose \
        #   --output "port_scan_results_$(date +%Y%m%d_%H%M%S).json"
        echo "Port scanning requires manual confirmation due to security considerations."
        echo "To enable, uncomment the port scanning commands in the workflow."
        
    - name: Run Minecraft Scan
      if: github.event.inputs.scan_type == 'minecraft_scan'
      run: |
        echo "Running Minecraft server scan on ${{ github.event.inputs.target_ip }}"
        echo "Ports: ${{ github.event.inputs.minecraft_port_start }}-${{ github.event.inputs.minecraft_port_end }}"
        echo ""
        echo "Note: This will attempt to detect Minecraft servers on the specified target."
        echo "Ensure you have permission to scan the target network."
        echo ""
        # This would run the actual Minecraft scan - commented out for safety
        # Interactive mode would be needed for Minecraft scanning
        echo "Minecraft scanning requires manual confirmation due to security considerations."
        echo "To enable, uncomment the Minecraft scanning commands in the workflow."
        
    - name: Create Sample Output
      run: |
        mkdir -p output/sample_scan
        cat > output/sample_scan/sample_results.json << 'EOF'
        {
          "scan_info": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "scan_type": "Sample Output",
            "duration": 0.1,
            "total_ips": 2,
            "method": "demonstration"
          },
          "active_ips": {
            "count": 1,
            "ips": ["127.0.0.1"]
          },
          "inactive_ips": {
            "count": 1,
            "ips": ["127.0.0.2"]
          }
        }
        EOF
        
        cat > output/sample_scan/readme.txt << 'EOF'
        ROCON Scanner Sample Output
        ===========================
        
        This is a sample output to demonstrate the structure of scan results.
        
        The tool supports multiple output formats:
        - JSON: Structured data for programmatic use
        - TXT: Human-readable text format
        - CSV: Spreadsheet-compatible format
        
        For actual network scanning, configure the workflow inputs:
        - Target IP or IP range
        - Scan method (ping/socket)
        - Number of worker threads
        - Output format preference
        
        Remember: Only scan networks you own or have explicit permission to scan.
        EOF
        
    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rocon-advanced-scan-${{ github.run_number }}
        path: |
          output/
          *.json
          *.txt
          *.csv
        retention-days: 30
        
    - name: Summary
      if: always()
      run: |
        echo "=== ROCON Scanner Execution Complete ==="
        echo "Mode: ${{ github.event.inputs.scan_type }}"
        echo "Artifacts uploaded for download in Actions tab"
        echo ""
        echo "Next steps:"
        echo "1. Download artifacts to review results"
        echo "2. For actual network scanning, ensure proper permissions"
        echo "3. Refer to README.md for detailed usage instructions"